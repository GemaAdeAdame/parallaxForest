{"ast":null,"code":"import _slicedToArray from \"C:/Users/maria/OneDrive/Escritorio/parallaxForest/Front/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"C:\\\\Users\\\\maria\\\\OneDrive\\\\Escritorio\\\\parallaxForest\\\\Front\\\\src\\\\components\\\\birds\\\\Song.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { FaMicrophone, FaMicrophoneSlash } from 'react-icons/fa';\nimport '.song.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Song(props) {\n  _s();\n  //funci贸n para que suene el canto\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    playing = _useState2[0],\n    setPlaying = _useState2[1];\n  var audioRef = useRef(null);\n  function togglePlaying() {\n    if (playing) {\n      audioRef.current.pause();\n    } else {\n      audioRef.current.play();\n    }\n    setPlaying(!playing);\n  }\n  ;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mini-player\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"play \".concat(playing ? 'playing' : ''),\n        onClick: togglePlaying,\n        children: playing ? /*#__PURE__*/_jsxDEV(FaMicrophone, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 36\n        }, this) : /*#__PURE__*/_jsxDEV(FaMicrophoneSlash, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 55\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"audio-container\",\n        children: /*#__PURE__*/_jsxDEV(\"audio\", {\n          ref: audioRef,\n          className: \"audio\",\n          children: /*#__PURE__*/_jsxDEV(\"source\", {\n            type: \"audio/mp3\",\n            src: props.song\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n}\n_s(Song, \"XUhw9Ulqs+ATTlP6jiSDfdrWuNE=\");\n_c = Song;\nexport default Song;\n\n//     function Song({ songUrl }) {\n//         const [playing, setPlaying] = useState(false);\n//         const audioRef = useRef(null);\n\n//         function togglePlaying() {\n//             if (playing) {\n//                 audioRef.current.pause();\n//             } else {\n//                 audioRef.current.play();\n//             }\n//             setPlaying(!playing);\n//         };\n\n//         return (\n//             <div className=\"mini-player\">\n//                 <button className={`play ${playing ? 'playing' : ''}`} onClick={togglePlaying}>\n//                     {playing ? <FaMicrophoneSlash /> : <FaMicrophone />}\n//                 </button>\n//                 <div className=\"audio-container\" >\n//                     <audio ref={audioRef} className=\"audio\" >\n//                         <source src={songUrl} type=\"audio/mp3\" />\n//                     </audio>\n//                 </div>\n//             </div>\n//         );\n//     }\n\n// export default Song;\n\n// intento 3\n// function Song() {\n// const [repo, setRepo] = useState([]);\n// useEffect(() => {\n//     fetch('http://127.0.0.1:8000/birds/list')\n//         .then(response => response.json())\n//         .then(repo => setRepo(repo))\n//         .catch(error => console.error(error));\n// }, []);\n\n// //funci贸n para que suene el canto\n// const [playing, setPlaying] = useState(false);\n// const [audioElements, setAudioElements] = useState([]);\n\n// function togglePlaying(index) {\n//     if (audioElements[index].paused) {\n//         audioElements.forEach((audio) => audio.pause());\n//         audioElements[index].play();\n//         setPlaying(true);\n//     } else {\n//         audioElements[index].pause();\n//         setPlaying(false);\n//     }\n// };\n\n// useEffect(() => {\n//     setAudioElements(repo.map((int) => {\n//         const audioElement = new Audio(int.song);\n//         audioElement.addEventListener('ended', () => {\n//             setPlaying(false);\n//         });\n//         return audioElement;\n//     }));\n// }, [repo]);\n\n// return (\n//     <>\n//         <div className=\"mini-player\">\n//             <button className={`play ${playing ? 'playing' : ''}`} onClick={() => togglePlaying(0)}>\n//                 {playing ? <FaMicrophoneSlash /> : <FaMicrophone />}\n//             </button>\n//             {repo.map((int, index) => (\n//                 <div key={int.id} className=\"audio-container\">\n//                     <button className={`play ${playing ? 'playing' : ''}`} onClick={() => togglePlaying(index)}>\n//                         {playing ? <FaMicrophoneSlash /> : <FaMicrophone />}\n//                     </button>\n//                 </div>\n//             ))}\n//         </div>\n//     </>\n// );\nvar _c;\n$RefreshReg$(_c, \"Song\");","map":{"version":3,"names":["React","useState","useRef","FaMicrophone","FaMicrophoneSlash","jsxDEV","_jsxDEV","Fragment","_Fragment","Song","props","_s","_useState","_useState2","_slicedToArray","playing","setPlaying","audioRef","togglePlaying","current","pause","play","children","className","concat","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","src","song","_c","$RefreshReg$"],"sources":["C:/Users/maria/OneDrive/Escritorio/parallaxForest/Front/src/components/birds/Song.jsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport { FaMicrophone, FaMicrophoneSlash } from 'react-icons/fa';\r\n\r\nimport '.song.css';\r\n\r\nfunction Song(props) {\r\n\r\n\r\n    //funci贸n para que suene el canto\r\n    const [playing, setPlaying] = useState(false);\r\n    const audioRef = useRef(null);\r\n\r\n    function togglePlaying() {\r\n        if (playing) {\r\n            audioRef.current.pause();\r\n        } else {\r\n            audioRef.current.play();\r\n        }\r\n        setPlaying(!playing);\r\n    };\r\n\r\n    return (\r\n        <>\r\n                <div className=\"mini-player\" >\r\n                    <button className={`play ${playing ? 'playing' : ''}`} onClick={togglePlaying}>\r\n                        {playing ? <FaMicrophone /> : <FaMicrophoneSlash />}\r\n                    </button>                   \r\n                    <div className=\"audio-container\"  >\r\n                        <audio ref={audioRef}  className=\"audio\" >\r\n                            <source type=\"audio/mp3\" src={props.song} />\r\n                        </audio>\r\n                    </div>\r\n\r\n                </div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default Song;\r\n\r\n\r\n//     function Song({ songUrl }) {\r\n//         const [playing, setPlaying] = useState(false);\r\n//         const audioRef = useRef(null);\r\n    \r\n//         function togglePlaying() {\r\n//             if (playing) {\r\n//                 audioRef.current.pause();\r\n//             } else {\r\n//                 audioRef.current.play();\r\n//             }\r\n//             setPlaying(!playing);\r\n//         };\r\n    \r\n//         return (\r\n//             <div className=\"mini-player\">\r\n//                 <button className={`play ${playing ? 'playing' : ''}`} onClick={togglePlaying}>\r\n//                     {playing ? <FaMicrophoneSlash /> : <FaMicrophone />}\r\n//                 </button>\r\n//                 <div className=\"audio-container\" >\r\n//                     <audio ref={audioRef} className=\"audio\" >\r\n//                         <source src={songUrl} type=\"audio/mp3\" />\r\n//                     </audio>\r\n//                 </div>\r\n//             </div>\r\n//         );\r\n//     }\r\n    \r\n\r\n\r\n// export default Song;\r\n\r\n\r\n// intento 3\r\n// function Song() {\r\n// const [repo, setRepo] = useState([]);\r\n// useEffect(() => {\r\n//     fetch('http://127.0.0.1:8000/birds/list')\r\n//         .then(response => response.json())\r\n//         .then(repo => setRepo(repo))\r\n//         .catch(error => console.error(error));\r\n// }, []);\r\n\r\n// //funci贸n para que suene el canto\r\n// const [playing, setPlaying] = useState(false);\r\n// const [audioElements, setAudioElements] = useState([]);\r\n\r\n// function togglePlaying(index) {\r\n//     if (audioElements[index].paused) {\r\n//         audioElements.forEach((audio) => audio.pause());\r\n//         audioElements[index].play();\r\n//         setPlaying(true);\r\n//     } else {\r\n//         audioElements[index].pause();\r\n//         setPlaying(false);\r\n//     }\r\n// };\r\n\r\n// useEffect(() => {\r\n//     setAudioElements(repo.map((int) => {\r\n//         const audioElement = new Audio(int.song);\r\n//         audioElement.addEventListener('ended', () => {\r\n//             setPlaying(false);\r\n//         });\r\n//         return audioElement;\r\n//     }));\r\n// }, [repo]);\r\n\r\n// return (\r\n//     <>\r\n//         <div className=\"mini-player\">\r\n//             <button className={`play ${playing ? 'playing' : ''}`} onClick={() => togglePlaying(0)}>\r\n//                 {playing ? <FaMicrophoneSlash /> : <FaMicrophone />}\r\n//             </button>\r\n//             {repo.map((int, index) => (\r\n//                 <div key={int.id} className=\"audio-container\">\r\n//                     <button className={`play ${playing ? 'playing' : ''}`} onClick={() => togglePlaying(index)}>\r\n//                         {playing ? <FaMicrophoneSlash /> : <FaMicrophone />}\r\n//                     </button>\r\n//                 </div>\r\n//             ))}\r\n//         </div>\r\n//     </>\r\n// );\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,SAASC,YAAY,EAAEC,iBAAiB,QAAQ,gBAAgB;AAEhE,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEnB,SAASC,IAAIA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAGjB;EACA,IAAAC,SAAA,GAA8BX,QAAQ,CAAC,KAAK,CAAC;IAAAY,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAtCG,OAAO,GAAAF,UAAA;IAAEG,UAAU,GAAAH,UAAA;EAC1B,IAAMI,QAAQ,GAAGf,MAAM,CAAC,IAAI,CAAC;EAE7B,SAASgB,aAAaA,CAAA,EAAG;IACrB,IAAIH,OAAO,EAAE;MACTE,QAAQ,CAACE,OAAO,CAACC,KAAK,EAAE;IAC5B,CAAC,MAAM;MACHH,QAAQ,CAACE,OAAO,CAACE,IAAI,EAAE;IAC3B;IACAL,UAAU,CAAC,CAACD,OAAO,CAAC;EACxB;EAAC;EAED,oBACIT,OAAA,CAAAE,SAAA;IAAAc,QAAA,eACQhB,OAAA;MAAKiB,SAAS,EAAC,aAAa;MAAAD,QAAA,gBACxBhB,OAAA;QAAQiB,SAAS,UAAAC,MAAA,CAAUT,OAAO,GAAG,SAAS,GAAG,EAAE,CAAG;QAACU,OAAO,EAAEP,aAAc;QAAAI,QAAA,EACzEP,OAAO,gBAAGT,OAAA,CAACH,YAAY;UAAAuB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAG,gBAAGvB,OAAA,CAACF,iBAAiB;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAG;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC9C,eACTvB,OAAA;QAAKiB,SAAS,EAAC,iBAAiB;QAAAD,QAAA,eAC5BhB,OAAA;UAAOwB,GAAG,EAAEb,QAAS;UAAEM,SAAS,EAAC,OAAO;UAAAD,QAAA,eACpChB,OAAA;YAAQyB,IAAI,EAAC,WAAW;YAACC,GAAG,EAAEtB,KAAK,CAACuB;UAAK;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAG;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MACxC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAEJ,iBACX;AAGX;AAAClB,EAAA,CAhCQF,IAAI;AAAAyB,EAAA,GAAJzB,IAAI;AAkCb,eAAeA,IAAI;;AAGnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}