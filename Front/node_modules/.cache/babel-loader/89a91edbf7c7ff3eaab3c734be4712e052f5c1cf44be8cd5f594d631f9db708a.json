{"ast":null,"code":"import _slicedToArray from \"C:/Users/ana96/OneDrive/Documentos/GitHub/parallaxForest/Front/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"C:\\\\Users\\\\ana96\\\\OneDrive\\\\Documentos\\\\GitHub\\\\parallaxForest\\\\Front\\\\src\\\\components\\\\Mapa\\\\coordenadas.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Coordenadas() {\n  _s();\n  var _useState = useState([0, 0]),\n    _useState2 = _slicedToArray(_useState, 2),\n    posicion = _useState2[0],\n    setPosicion = _useState2[1];\n  useEffect(function () {\n    navigator.geolocation.getCurrentPosition(function (pos) {\n      setPosicion([pos.coords.latitude, pos.coords.longitude]);\n    }, function (error) {\n      return console.log(error);\n    });\n  }, []);\n\n  // const handleEnviarCoordenadas = async () => {\n  //   const [latitud, longitud] = posicion;\n  //   const response = await fetch('http://127.0.0.1:8000/home', {\n  //     method: 'POST',\n  //     headers: {\n  //       'Content-Type': 'application/json'\n  //     },\n  //     body: JSON.stringify({\n  //       Latitud: latitud,\n  //       Longitud: longitud\n  //     })\n  //   });\n  //   if (response.ok) {\n  //     console.log('Coordenadas enviadas con éxito');\n  //   } else {\n  //     console.log('Error al enviar coordenadas');\n  //   }\n  // }\n\n  var handleEnviarCoordenadas = function handleEnviarCoordenadas() {\n    var requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        longitud: posicion[1],\n        latitud: posicion[0]\n      })\n    };\n    fetch('http://127.0.0.1:8000/avistamientos/list', requestOptions).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      return console.log(data);\n    }).catch(function (error) {\n      return console.log(error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mapa\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Mi ubicaci\\xF3n actual:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Latitud: \", posicion[0]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Longitud: \", posicion[1]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleEnviarCoordenadas,\n      children: \"Enviar coordenadas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(Coordenadas, \"qi/g+EkoOBGROuezxMKuy4QtRUQ=\");\n_c = Coordenadas;\nexport default Coordenadas;\nvar _c;\n$RefreshReg$(_c, \"Coordenadas\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","Coordenadas","_s","_useState","_useState2","_slicedToArray","posicion","setPosicion","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","error","console","log","handleEnviarCoordenadas","requestOptions","method","headers","body","JSON","stringify","longitud","latitud","fetch","then","response","json","data","catch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ana96/OneDrive/Documentos/GitHub/parallaxForest/Front/src/components/Mapa/coordenadas.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nfunction Coordenadas() {\r\n  const [posicion, setPosicion] = useState([0, 0]);\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      (pos) => {\r\n        setPosicion([pos.coords.latitude, pos.coords.longitude]);\r\n      },\r\n      (error) => console.log(error)\r\n    );\r\n  }, []);\r\n\r\n  // const handleEnviarCoordenadas = async () => {\r\n  //   const [latitud, longitud] = posicion;\r\n  //   const response = await fetch('http://127.0.0.1:8000/home', {\r\n  //     method: 'POST',\r\n  //     headers: {\r\n  //       'Content-Type': 'application/json'\r\n  //     },\r\n  //     body: JSON.stringify({\r\n  //       Latitud: latitud,\r\n  //       Longitud: longitud\r\n  //     })\r\n  //   });\r\n  //   if (response.ok) {\r\n  //     console.log('Coordenadas enviadas con éxito');\r\n  //   } else {\r\n  //     console.log('Error al enviar coordenadas');\r\n  //   }\r\n  // }\r\n\r\n  const handleEnviarCoordenadas = () => {\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ longitud: posicion[1], latitud: posicion[0] })\r\n    };\r\n    fetch('http://127.0.0.1:8000/avistamientos/list', requestOptions)\r\n      .then(response => response.json())\r\n      .then(data => console.log(data))\r\n      .catch(error => console.log(error));\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"mapa\">\r\n      <h2>Mi ubicación actual:</h2>\r\n      <p>Latitud: {posicion[0]}</p>\r\n      <p>Longitud: {posicion[1]}</p>\r\n      <button onClick={handleEnviarCoordenadas}>Enviar coordenadas</button>\r\n    </div>\r\n  );\r\n}\r\nexport default Coordenadas"],"mappings":";;;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,IAAAC,SAAA,GAAgCL,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAAAM,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAzCG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAE5BP,SAAS,CAAC,YAAM;IACdW,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACtC,UAACC,GAAG,EAAK;MACPJ,WAAW,CAAC,CAACI,GAAG,CAACC,MAAM,CAACC,QAAQ,EAAEF,GAAG,CAACC,MAAM,CAACE,SAAS,CAAC,CAAC;IAC1D,CAAC,EACD,UAACC,KAAK;MAAA,OAAKC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAAA,EAC9B;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,IAAMG,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAA,EAAS;IACpC,IAAMC,cAAc,GAAG;MACrBC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,QAAQ,EAAEnB,QAAQ,CAAC,CAAC,CAAC;QAAEoB,OAAO,EAAEpB,QAAQ,CAAC,CAAC;MAAE,CAAC;IACtE,CAAC;IACDqB,KAAK,CAAC,0CAA0C,EAAER,cAAc,CAAC,CAC9DS,IAAI,CAAC,UAAAC,QAAQ;MAAA,OAAIA,QAAQ,CAACC,IAAI,EAAE;IAAA,EAAC,CACjCF,IAAI,CAAC,UAAAG,IAAI;MAAA,OAAIf,OAAO,CAACC,GAAG,CAACc,IAAI,CAAC;IAAA,EAAC,CAC/BC,KAAK,CAAC,UAAAjB,KAAK;MAAA,OAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAAA,EAAC;EACvC,CAAC;EAGD,oBACEf,OAAA;IAAKiC,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBlC,OAAA;MAAAkC,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eAC7BtC,OAAA;MAAAkC,QAAA,GAAG,WAAS,EAAC5B,QAAQ,CAAC,CAAC,CAAC;IAAA;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eAC7BtC,OAAA;MAAAkC,QAAA,GAAG,YAAU,EAAC5B,QAAQ,CAAC,CAAC,CAAC;IAAA;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eAC9BtC,OAAA;MAAQuC,OAAO,EAAErB,uBAAwB;MAAAgB,QAAA,EAAC;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACjE;AAEV;AAACpC,EAAA,CApDQD,WAAW;AAAAuC,EAAA,GAAXvC,WAAW;AAqDpB,eAAeA,WAAW;AAAA,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}